// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/repo.go

// Package mock_database is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/jfavo/integra-partners-assessment-backend/internal/errors"
	models "github.com/jfavo/integra-partners-assessment-backend/internal/models"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIRepo) CreateUser(arg0 models.User) (*models.User, errors.ErrorCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(errors.ErrorCode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRepoMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRepo)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockIRepo) DeleteUser(userId int) (bool, errors.ErrorCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.ErrorCode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIRepoMockRecorder) DeleteUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIRepo)(nil).DeleteUser), userId)
}

// GetAllUsers mocks base method.
func (m *MockIRepo) GetAllUsers() ([]models.User, errors.ErrorCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(errors.ErrorCode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIRepoMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIRepo)(nil).GetAllUsers))
}

// UpdateUser mocks base method.
func (m *MockIRepo) UpdateUser(arg0 models.User) (*models.User, errors.ErrorCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(errors.ErrorCode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIRepoMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIRepo)(nil).UpdateUser), arg0)
}
